UNIT TEST 1
----------------- Unit Test: getCost ----------------
Cost = -1, Expected = -1
SUCCESS
Cost = 0, Expected = 0
SUCCESS
Cost = 2, Expected = 2
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 8, Expected = 8
SUCCESS
Cost = 0, Expected = 0
SUCCESS
Cost = 3, Expected = 3
SUCCESS
Cost = 6, Expected = 6
SUCCESS
Cost = 6, Expected = 6
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 3, Expected = 3
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 3, Expected = 3
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 3, Expected = 3
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 3, Expected = 3
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 2, Expected = 2
SUCCESS
Cost = 5, Expected = 5
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 4, Expected = 4
SUCCESS
Cost = 4, Expected = 4
SUCCESS

 >>>>> getCost testing complete passed [28 of 28] tests <<<<<

UNIT TEST 2
----------------- Unit Test: isGameOver ----------------
Game state = 0, Expected = 0
SUCCESS
Game state = 1, Expected = 1
SUCCESS
Game state = 0, Expected = 0
SUCCESS
Game state = 1, Expected = 1
SUCCESS

 >>>>> isGameOver testing complete passed [4 of 4] tests <<<<<

UNIT TEST 3
----------------- Unit Test: numHandCards ----------------
Number of hand cards = 0, Expected = 0
SUCCESS
Number of hand cards = 1, Expected = 1
SUCCESS
Number of hand cards = 2, Expected = 2
SUCCESS
Number of hand cards = 3, Expected = 3
SUCCESS
Number of hand cards = 4, Expected = 4
SUCCESS
Number of hand cards = 5, Expected = 5
SUCCESS
Number of hand cards = 6, Expected = 6
SUCCESS
Number of hand cards = 7, Expected = 7
SUCCESS
Number of hand cards = 8, Expected = 8
SUCCESS
Number of hand cards = 9, Expected = 9
SUCCESS
Number of hand cards = 10, Expected = 10
SUCCESS

 >>>>> numHandCards testing complete passed [11 of 11] tests <<<<<

UNIT TEST 4
----------------- Unit Test: whoseTurn ----------------
Player turn = 0, Expected = 0
SUCCESS
Player turn = 1, Expected = 1
SUCCESS
Player turn = 2, Expected = 2
SUCCESS
Player turn = 3, Expected = 3
SUCCESS

 >>>>> whoseTurn testing complete passed [4 of 4] tests <<<<<

CARD TEST 1
----------------- Testing Card: Smithy ----------------
Hand Count = 5, Expected = 7
FAIL
Played count = 1, Expected = 1
SUCCESS

 >>>>> Smithy testing complete passed [1 of 2] tests <<<<<

CARD TEST 2
----------------- Testing Card: Adventurer ----------------
Discard count = 0, Expected = 0
SUCCESS
Treasure count = 6, Expected = 6
SUCCESS

 >>>>> Adventurer testing complete passed [2 of 2] tests <<<<<

CARD TEST 3
----------------- Testing Card: Village ----------------
Hand Count = 5, Expected = 5
SUCCESS
Actions = 3, Expected = 3
SUCCESS
Played count = 0, Expected = 1
FAIL

 >>>>> Village testing complete passed [2 of 3] tests <<<<<

CARD TEST 4
----------------- Testing Card: Great Hall ----------------
Hand Count = 5, Expected = 5
SUCCESS
Actions = 2, Expected = 2
SUCCESS
Played count = 1, Expected = 1
SUCCESS

 >>>>> Great Hall testing complete passed [3 of 3] tests <<<<<

Function 'compare'
Lines executed:83.33% of 6

Function 'newGame'
Lines executed:0.00% of 2

Function 'kingdomCards'
Lines executed:0.00% of 12

Function 'initializeGame'
Lines executed:93.59% of 78

Function 'shuffle'
Lines executed:94.44% of 18

Function 'playCard'
Lines executed:0.00% of 14

Function 'buyCard'
Lines executed:0.00% of 13

Function 'numHandCards'
Lines executed:100.00% of 1

Function 'handCard'
Lines executed:0.00% of 2

Function 'supplyCount'
Lines executed:0.00% of 1

Function 'fullDeckCount'
Lines executed:0.00% of 14

Function 'whoseTurn'
Lines executed:100.00% of 1

Function 'endTurn'
Lines executed:0.00% of 22

Function 'isGameOver'
Lines executed:100.00% of 12

Function 'scoreFor'
Lines executed:0.00% of 62

Function 'getWinners'
Lines executed:0.00% of 33

Function 'drawCard'
Lines executed:33.33% of 24

Function 'getCost'
Lines executed:100.00% of 30

Function 'cardEffect'
Lines executed:5.41% of 259

Function 'discardCard'
Lines executed:73.33% of 15

Function 'gainCard'
Lines executed:0.00% of 15

Function 'updateCoins'
Lines executed:71.43% of 14

Function 'smithyEffect'
Lines executed:100.00% of 5

Function 'adventurerEffect'
Lines executed:64.71% of 17

Function 'villageEffect'
Lines executed:100.00% of 4

Function 'greatHallEffect'
Lines executed:100.00% of 4

Function 'councilRoomEffect'
Lines executed:0.00% of 12

File 'dominion.c'
Lines executed:29.86% of 690
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void *a, const void *b)
        -:    9:{
      224:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      224:   12:  if (*(int *)a < *(int *)b)
       80:   13:    return -1;
      144:   14:  return 0;
      224:   15:}
        -:   16:
        -:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        7:   48:  SelectStream(1);
        7:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
       14:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        7:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      154:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
     1540:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
     1330:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
      700:   69:    }
       70:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        7:   76:  if (numPlayers == 2)
        -:   77:  {
        6:   78:    state->supplyCount[curse] = 10;
        6:   79:  }
        1:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
    #####:   83:  }
        -:   84:  else
        -:   85:  {
        1:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        7:   90:  if (numPlayers == 2)
        -:   91:  {
        6:   92:    state->supplyCount[estate] = 8;
        6:   93:    state->supplyCount[duchy] = 8;
        6:   94:    state->supplyCount[province] = 8;
        6:   95:  }
        -:   96:  else
        -:   97:  {
        1:   98:    state->supplyCount[estate] = 12;
        1:   99:    state->supplyCount[duchy] = 12;
        1:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        7:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  105:  state->supplyCount[silver] = 40;
        7:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      294:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     2310:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1085:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
      133:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
        7:  118:          if (numPlayers == 2)
        -:  119:          {
        6:  120:            state->supplyCount[i] = 8;
        6:  121:          }
        -:  122:          else
        -:  123:          {
        1:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        7:  126:        }
        -:  127:        else
        -:  128:        {
       63:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       70:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1015:  135:        state->supplyCount[i] = -1;
        -:  136:      }
     1015:  137:    }
      140:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       46:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       16:  146:    state->deckCount[i] = 0;
      128:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       48:  149:      state->deck[i][j] = estate;
       48:  150:      state->deckCount[i]++;
       48:  151:    }
      256:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      112:  154:      state->deck[i][j] = copper;
      112:  155:      state->deckCount[i]++;
      112:  156:    }
       16:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       46:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       16:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
       16:  166:  }
        -:  167:
        -:  168:  //draw player hands
       46:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       16:  172:    state->handCount[i] = 0;
       16:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
       16:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      392:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      189:  184:    state->embargoTokens[i] = 0;
      189:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        7:  188:  state->outpostPlayed = 0;
        7:  189:  state->phase = 0;
        7:  190:  state->numActions = 1;
        7:  191:  state->numBuys = 1;
        7:  192:  state->playedCardCount = 0;
        7:  193:  state->whoseTurn = 0;
        7:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       84:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       35:  200:    drawCard(state->whoseTurn, state);
       35:  201:  }
        -:  202:
        7:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        7:  205:  return 0;
        7:  206:}
        -:  207:
        -:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       16:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       16:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
       16:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      352:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      160:  223:    card = floor(Random() * state->deckCount[player]);
      160:  224:    newDeck[newDeckPos] = state->deck[player][card];
      160:  225:    newDeckPos++;
     1118:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      399:  228:      state->deck[player][i] = state->deck[player][i + 1];
      399:  229:    }
      160:  230:    state->deckCount[player]--;
        -:  231:  }
      352:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      160:  234:    state->deck[player][i] = newDeck[i];
      160:  235:    state->deckCount[player]++;
      160:  236:  }
        -:  237:
       16:  238:  return 0;
       16:  239:}
        -:  240:
        -:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
    #####:  280:}
        -:  281:
        -:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
    #####:  328:}
        -:  329:
        -:  330:int numHandCards(struct gameState *state)
        -:  331:{
       22:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
        -:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        -:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
        -:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
    #####:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
    #####:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
    #####:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        -:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       34:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
        -:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
    #####:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
    #####:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
    #####:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        -:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
        8:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
        2:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
        6:  434:  j = 0;
      312:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
      150:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
       10:  439:      j++;
       10:  440:    }
      150:  441:  }
        6:  442:  if (j >= 3)
        -:  443:  {
        2:  444:    return 1;
        -:  445:  }
        -:  446:
        4:  447:  return 0;
        8:  448:}
        -:  449:
        -:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
    #####:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
    #####:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
    #####:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
    #####:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
    #####:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  481:    };
    #####:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
    #####:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
    #####:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
    #####:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
    #####:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
    #####:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  510:    };
    #####:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
    #####:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
    #####:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
    #####:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
    #####:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
    #####:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  539:    };
    #####:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
    #####:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
    #####:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
    #####:  573:    }
    #####:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
    #####:  584:    }
    #####:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
    #####:  594:    }
    #####:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
    #####:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
    #####:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        -:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       42:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
    #####:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
    #####:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       42:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       42:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       42:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       42:  672:    state->deckCount[player]--;
       42:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       42:  676:  return 0;
       42:  677:}
        -:  678:
        -:  679:int getCost(int cardNumber)
        -:  680:{
       56:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        2:  684:    return 0;
        -:  685:  case estate:
        2:  686:    return 2;
        -:  687:  case duchy:
        2:  688:    return 5;
        -:  689:  case province:
        2:  690:    return 8;
        -:  691:  case copper:
        2:  692:    return 0;
        -:  693:  case silver:
        2:  694:    return 3;
        -:  695:  case gold:
        2:  696:    return 6;
        -:  697:  case adventurer:
        2:  698:    return 6;
        -:  699:  case council_room:
        2:  700:    return 5;
        -:  701:  case feast:
        2:  702:    return 4;
        -:  703:  case gardens:
        2:  704:    return 4;
        -:  705:  case mine:
        2:  706:    return 5;
        -:  707:  case remodel:
        2:  708:    return 4;
        -:  709:  case smithy:
        2:  710:    return 4;
        -:  711:  case village:
        2:  712:    return 3;
        -:  713:  case baron:
        2:  714:    return 4;
        -:  715:  case great_hall:
        2:  716:    return 3;
        -:  717:  case minion:
        2:  718:    return 5;
        -:  719:  case steward:
        2:  720:    return 3;
        -:  721:  case tribute:
        2:  722:    return 5;
        -:  723:  case ambassador:
        2:  724:    return 3;
        -:  725:  case cutpurse:
        2:  726:    return 4;
        -:  727:  case embargo:
        2:  728:    return 2;
        -:  729:  case outpost:
        2:  730:    return 5;
        -:  731:  case salvager:
        2:  732:    return 4;
        -:  733:  case sea_hag:
        2:  734:    return 4;
        -:  735:  case treasure_map:
        2:  736:    return 4;
        -:  737:  }
        -:  738:
        2:  739:  return -1;
       56:  740:}
        -:  741:
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        4:  749:  int currentPlayer = whoseTurn(state);
        4:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        4:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND]; // moved above the if statement
        4:  754:  if (nextPlayer > (state->numPlayers - 1))
        -:  755:  {
    #####:  756:    nextPlayer = 0;
    #####:  757:  }
        -:  758:
        -:  759:  //uses switch to select card and perform actions
        4:  760:  switch (card)
        -:  761:  {
        -:  762:  case adventurer:
        1:  763:    adventurerEffect(currentPlayer, state);
        1:  764:    return 0;
        -:  765:
        -:  766:  case council_room:
    #####:  767:    councilRoomEffect(currentPlayer, state, handPos);
    #####:  768:    return 0;
        -:  769:
        -:  770:  case feast:
        -:  771:    //gain card with cost up to 5
        -:  772:    //Backup hand
    #####:  773:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  774:    {
    #####:  775:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  776:      state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####:  777:    }
        -:  778:    //Backup hand
        -:  779:
        -:  780:    //Update Coins for Buy
    #####:  781:    updateCoins(currentPlayer, state, 5);
    #####:  782:    x = 1; //Condition to loop on
    #####:  783:    while (x == 1)
        -:  784:    { //Buy one card
    #####:  785:      if (supplyCount(choice1, state) <= 0)
        -:  786:      {
        -:  787:        if (DEBUG)
        -:  788:          printf("None of that card left, sorry!\n");
        -:  789:
        -:  790:        if (DEBUG)
        -:  791:        {
        -:  792:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:        }
    #####:  794:      }
    #####:  795:      else if (state->coins < getCost(choice1))
        -:  796:      {
    #####:  797:        printf("That card is too expensive!\n");
        -:  798:
        -:  799:        if (DEBUG)
        -:  800:        {
        -:  801:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  802:        }
    #####:  803:      }
        -:  804:      else
        -:  805:      {
        -:  806:
        -:  807:        if (DEBUG)
        -:  808:        {
        -:  809:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:        }
        -:  811:
    #####:  812:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  813:        x = 0;                                      //No more buying cards
        -:  814:
        -:  815:        if (DEBUG)
        -:  816:        {
        -:  817:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  818:        }
        -:  819:      }
        -:  820:    }
        -:  821:
        -:  822:    //Reset Hand
    #####:  823:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  824:    {
    #####:  825:      state->hand[currentPlayer][i] = temphand[i];
    #####:  826:      temphand[i] = -1;
    #####:  827:    }
        -:  828:    //Reset Hand
        -:  829:
    #####:  830:    return 0;
        -:  831:
        -:  832:  case gardens:
    #####:  833:    return -1;
        -:  834:
        -:  835:  case mine:
    #####:  836:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  837:
    #####:  838:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  839:    {
    #####:  840:      return -1;
        -:  841:    }
        -:  842:
    #####:  843:    if (choice2 > treasure_map || choice2 < curse)
        -:  844:    {
    #####:  845:      return -1;
        -:  846:    }
        -:  847:
    #####:  848:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  849:    {
    #####:  850:      return -1;
        -:  851:    }
        -:  852:
    #####:  853:    gainCard(choice2, state, 2, currentPlayer);
        -:  854:
        -:  855:    //discard card from hand
    #####:  856:    discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:    //discard trashed card
    #####:  859:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  860:    {
    #####:  861:      if (state->hand[currentPlayer][i] == j)
        -:  862:      {
    #####:  863:        discardCard(i, currentPlayer, state, 0);
    #####:  864:        break;
        -:  865:      }
    #####:  866:    }
        -:  867:
    #####:  868:    return 0;
        -:  869:
        -:  870:  case remodel:
    #####:  871:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  872:
    #####:  873:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  874:    {
    #####:  875:      return -1;
        -:  876:    }
        -:  877:
    #####:  878:    gainCard(choice2, state, 0, currentPlayer);
        -:  879:
        -:  880:    //discard card from hand
    #####:  881:    discardCard(handPos, currentPlayer, state, 0);
        -:  882:
        -:  883:    //discard trashed card
    #####:  884:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  885:    {
    #####:  886:      if (state->hand[currentPlayer][i] == j)
        -:  887:      {
    #####:  888:        discardCard(i, currentPlayer, state, 0);
    #####:  889:        break;
        -:  890:      }
    #####:  891:    }
        -:  892:
    #####:  893:    return 0;
        -:  894:
        -:  895:  case smithy:
        1:  896:    smithyEffect(currentPlayer, state, handPos);
        1:  897:    return 0;
        -:  898:
        -:  899:  case village:
        1:  900:    villageEffect(currentPlayer, state, handPos);
        1:  901:    return 0;
        -:  902:
        -:  903:  case baron:
    #####:  904:    state->numBuys++; //Increase buys by 1!
    #####:  905:    if (choice1 > 0)
        -:  906:    {                             //Boolean true or going to discard an estate
    #####:  907:      int p = 0;                  //Iterator for hand!
    #####:  908:      int card_not_discarded = 1; //Flag for discard set!
    #####:  909:      while (card_not_discarded)
        -:  910:      {
    #####:  911:        if (state->hand[currentPlayer][p] == estate)
        -:  912:        {                    //Found an estate card!
    #####:  913:          state->coins += 4; //Add 4 coins to the amount of coins
    #####:  914:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  915:          state->discardCount[currentPlayer]++;
    #####:  916:          for (; p < state->handCount[currentPlayer]; p++)
        -:  917:          {
    #####:  918:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  919:          }
    #####:  920:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  921:          state->handCount[currentPlayer]--;
    #####:  922:          card_not_discarded = 0; //Exit the loop
    #####:  923:        }
    #####:  924:        else if (p > state->handCount[currentPlayer])
        -:  925:        {
        -:  926:          if (DEBUG)
        -:  927:          {
        -:  928:            printf("No estate cards in your hand, invalid choice\n");
        -:  929:            printf("Must gain an estate if there are any\n");
        -:  930:          }
    #####:  931:          if (supplyCount(estate, state) > 0)
        -:  932:          {
    #####:  933:            gainCard(estate, state, 0, currentPlayer);
    #####:  934:            state->supplyCount[estate]--; //Decrement estates
    #####:  935:            if (supplyCount(estate, state) == 0)
        -:  936:            {
    #####:  937:              isGameOver(state);
    #####:  938:            }
    #####:  939:          }
    #####:  940:          card_not_discarded = 0; //Exit the loop
    #####:  941:        }
        -:  942:
        -:  943:        else
        -:  944:        {
    #####:  945:          p++; //Next card
        -:  946:        }
        -:  947:      }
    #####:  948:    }
        -:  949:
        -:  950:    else
        -:  951:    {
    #####:  952:      if (supplyCount(estate, state) > 0)
        -:  953:      {
    #####:  954:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####:  955:        state->supplyCount[estate]--;              //Decrement Estates
    #####:  956:        if (supplyCount(estate, state) == 0)
        -:  957:        {
    #####:  958:          isGameOver(state);
    #####:  959:        }
    #####:  960:      }
        -:  961:    }
        -:  962:
    #####:  963:    return 0;
        -:  964:
        -:  965:  case great_hall:
        1:  966:    greatHallEffect(currentPlayer, state, handPos);
        1:  967:    return 0;
        -:  968:
        -:  969:  case minion:
        -:  970:    //+1 action
    #####:  971:    state->numActions++;
        -:  972:
        -:  973:    //discard card from hand
    #####:  974:    discardCard(handPos, currentPlayer, state, 0);
        -:  975:
    #####:  976:    if (choice1) //+2 coins
        -:  977:    {
    #####:  978:      state->coins = state->coins + 2;
    #####:  979:    }
        -:  980:
    #####:  981:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  982:    {
        -:  983:      //discard hand
    #####:  984:      while (numHandCards(state) > 0)
        -:  985:      {
    #####:  986:        discardCard(handPos, currentPlayer, state, 0);
        -:  987:      }
        -:  988:
        -:  989:      //draw 4
    #####:  990:      for (i = 0; i < 4; i++)
        -:  991:      {
    #####:  992:        drawCard(currentPlayer, state);
    #####:  993:      }
        -:  994:
        -:  995:      //other players discard hand and redraw if hand size > 4
    #####:  996:      for (i = 0; i < state->numPlayers; i++)
        -:  997:      {
    #####:  998:        if (i != currentPlayer)
        -:  999:        {
    #####: 1000:          if (state->handCount[i] > 4)
        -: 1001:          {
        -: 1002:            //discard hand
    #####: 1003:            while (state->handCount[i] > 0)
        -: 1004:            {
    #####: 1005:              discardCard(handPos, i, state, 0);
        -: 1006:            }
        -: 1007:
        -: 1008:            //draw 4
    #####: 1009:            for (j = 0; j < 4; j++)
        -: 1010:            {
    #####: 1011:              drawCard(i, state);
    #####: 1012:            }
    #####: 1013:          }
    #####: 1014:        }
    #####: 1015:      }
    #####: 1016:    }
    #####: 1017:    return 0;
        -: 1018:
        -: 1019:  case steward:
    #####: 1020:    if (choice1 == 1)
        -: 1021:    {
        -: 1022:      //+2 cards
    #####: 1023:      drawCard(currentPlayer, state);
    #####: 1024:      drawCard(currentPlayer, state);
    #####: 1025:    }
    #####: 1026:    else if (choice1 == 2)
        -: 1027:    {
        -: 1028:      //+2 coins
    #####: 1029:      state->coins = state->coins + 2;
    #####: 1030:    }
        -: 1031:    else
        -: 1032:    {
        -: 1033:      //trash 2 cards in hand
    #####: 1034:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1035:      discardCard(choice3, currentPlayer, state, 1);
        -: 1036:    }
        -: 1037:
        -: 1038:    //discard card from hand
    #####: 1039:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1040:    return 0;
        -: 1041:
        -: 1042:  case tribute:
    #####: 1043:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1044:    {
    #####: 1045:      if (state->deckCount[nextPlayer] > 0)
        -: 1046:      {
    #####: 1047:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1048:        state->deckCount[nextPlayer]--;
    #####: 1049:      }
    #####: 1050:      else if (state->discardCount[nextPlayer] > 0)
        -: 1051:      {
    #####: 1052:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1053:        state->discardCount[nextPlayer]--;
    #####: 1054:      }
        -: 1055:      else
        -: 1056:      {
        -: 1057:        //No Card to Reveal
        -: 1058:        if (DEBUG)
        -: 1059:        {
        -: 1060:          printf("No cards to reveal\n");
        -: 1061:        }
        -: 1062:      }
    #####: 1063:    }
        -: 1064:
        -: 1065:    else
        -: 1066:    {
    #####: 1067:      if (state->deckCount[nextPlayer] == 0)
        -: 1068:      {
    #####: 1069:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1070:        {
    #####: 1071:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1072:          state->deckCount[nextPlayer]++;
    #####: 1073:          state->discard[nextPlayer][i] = -1;
    #####: 1074:          state->discardCount[nextPlayer]--;
    #####: 1075:        }
        -: 1076:
    #####: 1077:        shuffle(nextPlayer, state); //Shuffle the deck
    #####: 1078:      }
    #####: 1079:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1080:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1081:      state->deckCount[nextPlayer]--;
    #####: 1082:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1083:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:      state->deckCount[nextPlayer]--;
        -: 1085:    }
        -: 1086:
    #####: 1087:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1088:    { //If we have a duplicate card, just drop one
    #####: 1089:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1090:      state->playedCardCount++;
    #####: 1091:      tributeRevealedCards[1] = -1;
    #####: 1092:    }
        -: 1093:
    #####: 1094:    for (i = 0; i <= 2; i++)
        -: 1095:    {
    #####: 1096:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1097:      { //Treasure cards
    #####: 1098:        state->coins += 2;
    #####: 1099:      }
        -: 1100:
    #####: 1101:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1102:      { //Victory Card Found
    #####: 1103:        drawCard(currentPlayer, state);
    #####: 1104:        drawCard(currentPlayer, state);
    #####: 1105:      }
        -: 1106:      else
        -: 1107:      { //Action Card
    #####: 1108:        state->numActions = state->numActions + 2;
        -: 1109:      }
    #####: 1110:    }
        -: 1111:
    #####: 1112:    return 0;
        -: 1113:
        -: 1114:  case ambassador:
    #####: 1115:    j = 0; //used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:    if (choice2 > 2 || choice2 < 0)
        -: 1118:    {
    #####: 1119:      return -1;
        -: 1120:    }
        -: 1121:
    #####: 1122:    if (choice1 == handPos)
        -: 1123:    {
    #####: 1124:      return -1;
        -: 1125:    }
        -: 1126:
    #####: 1127:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:    {
    #####: 1129:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:      {
    #####: 1131:        j++;
    #####: 1132:      }
    #####: 1133:    }
    #####: 1134:    if (j < choice2)
        -: 1135:    {
    #####: 1136:      return -1;
        -: 1137:    }
        -: 1138:
        -: 1139:    if (DEBUG)
        -: 1140:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:    //increase supply count for choosen card by amount being discarded
    #####: 1143:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:    //each other player gains a copy of revealed card
    #####: 1146:    for (i = 0; i < state->numPlayers; i++)
        -: 1147:    {
    #####: 1148:      if (i != currentPlayer)
        -: 1149:      {
    #####: 1150:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1151:      }
    #####: 1152:    }
        -: 1153:
        -: 1154:    //discard played card from hand
    #####: 1155:    discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:    //trash copies of cards returned to supply
    #####: 1158:    for (j = 0; j < choice2; j++)
        -: 1159:    {
    #####: 1160:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:      {
    #####: 1162:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:        {
    #####: 1164:          discardCard(i, currentPlayer, state, 1);
    #####: 1165:          break;
        -: 1166:        }
    #####: 1167:      }
    #####: 1168:    }
        -: 1169:
    #####: 1170:    return 0;
        -: 1171:
        -: 1172:  case cutpurse:
        -: 1173:
    #####: 1174:    updateCoins(currentPlayer, state, 2);
    #####: 1175:    for (i = 0; i < state->numPlayers; i++)
        -: 1176:    {
    #####: 1177:      if (i != currentPlayer)
        -: 1178:      {
    #####: 1179:        for (j = 0; j < state->handCount[i]; j++)
        -: 1180:        {
    #####: 1181:          if (state->hand[i][j] == copper)
        -: 1182:          {
    #####: 1183:            discardCard(j, i, state, 0);
    #####: 1184:            break;
        -: 1185:          }
    #####: 1186:          if (j == state->handCount[i])
        -: 1187:          {
    #####: 1188:            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:            {
        -: 1190:              if (DEBUG)
        -: 1191:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1192:            }
    #####: 1193:            break;
        -: 1194:          }
    #####: 1195:        }
    #####: 1196:      }
    #####: 1197:    }
        -: 1198:
        -: 1199:    //discard played card from hand
    #####: 1200:    discardCard(handPos, currentPlayer, state, 0);
        -: 1201:
    #####: 1202:    return 0;
        -: 1203:
        -: 1204:  case embargo:
        -: 1205:    //+2 Coins
    #####: 1206:    state->coins = state->coins + 2;
        -: 1207:
        -: 1208:    //see if selected pile is in play
    #####: 1209:    if (state->supplyCount[choice1] == -1)
        -: 1210:    {
    #####: 1211:      return -1;
        -: 1212:    }
        -: 1213:
        -: 1214:    //add embargo token to selected supply pile
    #####: 1215:    state->embargoTokens[choice1]++;
        -: 1216:
        -: 1217:    //trash card
    #####: 1218:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1219:    return 0;
        -: 1220:
        -: 1221:  case outpost:
        -: 1222:    //set outpost flag
    #####: 1223:    state->outpostPlayed++;
        -: 1224:
        -: 1225:    //discard card
    #####: 1226:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1227:    return 0;
        -: 1228:
        -: 1229:  case salvager:
        -: 1230:    //+1 buy
    #####: 1231:    state->numBuys++;
        -: 1232:
    #####: 1233:    if (choice1)
        -: 1234:    {
        -: 1235:      //gain coins equal to trashed card
    #####: 1236:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1237:      //trash card
    #####: 1238:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1239:    }
        -: 1240:
        -: 1241:    //discard card
    #####: 1242:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1243:    return 0;
        -: 1244:
        -: 1245:  case sea_hag:
    #####: 1246:    for (i = 0; i < state->numPlayers; i++)
        -: 1247:    {
    #####: 1248:      if (i != currentPlayer)
        -: 1249:      {
    #####: 1250:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1251:        state->deckCount[i]--;
    #####: 1252:        state->discardCount[i]++;
    #####: 1253:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1254:      }
    #####: 1255:    }
    #####: 1256:    return 0;
        -: 1257:
        -: 1258:  case treasure_map:
        -: 1259:    //search hand for another treasure_map
    #####: 1260:    index = -1;
    #####: 1261:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1262:    {
    #####: 1263:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1264:      {
    #####: 1265:        index = i;
    #####: 1266:        break;
        -: 1267:      }
    #####: 1268:    }
    #####: 1269:    if (index > -1)
        -: 1270:    {
        -: 1271:      //trash both treasure cards
    #####: 1272:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1273:      discardCard(index, currentPlayer, state, 1);
        -: 1274:
        -: 1275:      //gain 4 Gold cards
    #####: 1276:      for (i = 0; i < 4; i++)
        -: 1277:      {
    #####: 1278:        gainCard(gold, state, 1, currentPlayer);
    #####: 1279:      }
        -: 1280:
        -: 1281:      //return success
    #####: 1282:      return 1;
        -: 1283:    }
        -: 1284:
        -: 1285:    //no second treasure_map found in hand
    #####: 1286:    return -1;
        -: 1287:  }
        -: 1288:
    #####: 1289:  return -1;
        4: 1290:}
        -: 1291:
        -: 1292:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1293:{
        -: 1294:
        -: 1295:  //if card is not trashed, added to Played pile
        3: 1296:  if (trashFlag < 1)
        -: 1297:  {
        -: 1298:    //add card to played pile
        2: 1299:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1300:    state->playedCardCount++;
        2: 1301:  }
        -: 1302:
        -: 1303:  //set played card to -1
        3: 1304:  state->hand[currentPlayer][handPos] = -1;
        -: 1305:
        -: 1306:  //remove card from player's hand
        3: 1307:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1308:  {
        -: 1309:    //reduce number of cards in hand
    #####: 1310:    state->handCount[currentPlayer]--;
    #####: 1311:  }
        3: 1312:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1313:  {
        -: 1314:    //reduce number of cards in hand
    #####: 1315:    state->handCount[currentPlayer]--;
    #####: 1316:  }
        -: 1317:  else
        -: 1318:  {
        -: 1319:    //replace discarded card with last card in hand
        3: 1320:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1321:    //set last card to -1
        3: 1322:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1323:    //reduce number of cards in hand
        3: 1324:    state->handCount[currentPlayer]--;
        -: 1325:  }
        -: 1326:
        3: 1327:  return 0;
        -: 1328:}
        -: 1329:
        -: 1330:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1331:{
        -: 1332:  //Note: supplyPos is enum of choosen card
        -: 1333:
        -: 1334:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1335:  if (supplyCount(supplyPos, state) < 1)
        -: 1336:  {
    #####: 1337:    return -1;
        -: 1338:  }
        -: 1339:
        -: 1340:  //added card for [whoseTurn] current player:
        -: 1341:  // toFlag = 0 : add to discard
        -: 1342:  // toFlag = 1 : add to deck
        -: 1343:  // toFlag = 2 : add to hand
        -: 1344:
    #####: 1345:  if (toFlag == 1)
        -: 1346:  {
    #####: 1347:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1348:    state->deckCount[player]++;
    #####: 1349:  }
    #####: 1350:  else if (toFlag == 2)
        -: 1351:  {
    #####: 1352:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1353:    state->handCount[player]++;
    #####: 1354:  }
        -: 1355:  else
        -: 1356:  {
    #####: 1357:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1358:    state->discardCount[player]++;
        -: 1359:  }
        -: 1360:
        -: 1361:  //decrease number in supply pile
    #####: 1362:  state->supplyCount[supplyPos]--;
        -: 1363:
    #####: 1364:  return 0;
    #####: 1365:}
        -: 1366:
        -: 1367:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1368:{
        -: 1369:  int i;
        -: 1370:
        -: 1371:  //reset coin count
        7: 1372:  state->coins = 0;
        -: 1373:
        -: 1374:  //add coins for each Treasure card in player's hand
       84: 1375:  for (i = 0; i < state->handCount[player]; i++)
        -: 1376:  {
       35: 1377:    if (state->hand[player][i] == copper)
        -: 1378:    {
       28: 1379:      state->coins += 1;
       28: 1380:    }
        7: 1381:    else if (state->hand[player][i] == silver)
        -: 1382:    {
    #####: 1383:      state->coins += 2;
    #####: 1384:    }
        7: 1385:    else if (state->hand[player][i] == gold)
        -: 1386:    {
    #####: 1387:      state->coins += 3;
    #####: 1388:    }
       35: 1389:  }
        -: 1390:
        -: 1391:  //add bonus
        7: 1392:  state->coins += bonus;
        -: 1393:
        7: 1394:  return 0;
        -: 1395:}
        -: 1396:
        -: 1397:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1398:{
        -: 1399:  int i;
        -: 1400:  // Draw 3 cards
        -: 1401:  // TODO: This is a bug. Original code on line below
        -: 1402:  // for (i = 0; i < 3; i++)
        4: 1403:  for (i = 0; i < 1; i++)
        -: 1404:  {
        1: 1405:    drawCard(currentPlayer, state);
        1: 1406:  }
        -: 1407:
        -: 1408:  // Discard card from hand
        1: 1409:  discardCard(handPos, currentPlayer, state, 0);
        1: 1410:  return 0;
        -: 1411:}
        -: 1412:
        -: 1413:int adventurerEffect(int currentPlayer, struct gameState *state)
        -: 1414:{
        1: 1415:  int drawntreasure = 0;
        -: 1416:  int cardDrawn;
        -: 1417:  int temphand[MAX_HAND]; // moved above the if statement
        1: 1418:  int z = 0;              // this is the counter for the temp hand
        -: 1419:
        6: 1420:  while (drawntreasure < 2)
        -: 1421:  {
        2: 1422:    if (state->deckCount[currentPlayer] < 1)
        -: 1423:    { //if the deck is empty we need to shuffle discard and add to deck
    #####: 1424:      shuffle(currentPlayer, state);
    #####: 1425:    }
        -: 1426:
        2: 1427:    drawCard(currentPlayer, state);
        2: 1428:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        2: 1429:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1430:    {
        2: 1431:      drawntreasure++;
        2: 1432:    }
        -: 1433:    else
        -: 1434:    {
    #####: 1435:      temphand[z] = cardDrawn;
    #####: 1436:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1437:      z++;
        -: 1438:    }
        -: 1439:  }
        2: 1440:  while (z - 1 >= 0)
        -: 1441:  {
    #####: 1442:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -: 1443:    // TODO: This is a bug. The below line should be uncommented to revert behavior
        -: 1444:    // z = z - 1;
        -: 1445:  }
        -: 1446:
        1: 1447:  return 0;
        -: 1448:}
        -: 1449:
        -: 1450:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1451:{
        -: 1452:  // Draw 1 card
        1: 1453:  drawCard(currentPlayer, state);
        -: 1454:
        -: 1455:  // +2 Actions
        1: 1456:  state->numActions = state->numActions + 2;
        -: 1457:
        -: 1458:  // Discard played card from hand
        -: 1459:  // TODO: This is a bug. Correct line of code is below
        -: 1460:  // discardCard(handPos, currentPlayer, state, 0);
        1: 1461:  discardCard(0, 0, state, 1);
        1: 1462:  return 0;
        -: 1463:}
        -: 1464:
        -: 1465:int greatHallEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1466:{
        -: 1467:  // Draw 1 card
        1: 1468:  drawCard(currentPlayer, state);
        -: 1469:
        -: 1470:  // +1 Actions
        1: 1471:  state->numActions++;
        -: 1472:
        -: 1473:  // Discard played card from hand
        1: 1474:  discardCard(handPos, currentPlayer, state, 0);
        1: 1475:  return 0;
        -: 1476:}
        -: 1477:
        -: 1478:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1479:{
        -: 1480:  // Draw 4 Cards
    #####: 1481:  int i = 0;
    #####: 1482:  for (i = 0; i < 4; i++)
        -: 1483:  {
    #####: 1484:    drawCard(currentPlayer, state);
    #####: 1485:  }
        -: 1486:
        -: 1487:  // +1 Buy
    #####: 1488:  state->numBuys++;
        -: 1489:
        -: 1490:  // Each other player draws a card
    #####: 1491:  for (i = 0; i < state->numPlayers; i++)
        -: 1492:  {
        -: 1493:    // TODO: This is a bug. Correct line of code is below
        -: 1494:    //if (i != currentPlayer)
    #####: 1495:    if (i == currentPlayer)
        -: 1496:    {
    #####: 1497:      drawCard(i, state);
    #####: 1498:    }
    #####: 1499:  }
        -: 1500:
        -: 1501:  // Discard played card from hand
    #####: 1502:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
